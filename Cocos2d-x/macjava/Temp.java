public class Temp {

	public static void main (String args[]) {
		int x = 3;	//3的二进制为00000000 00000000 00000000 00000011
		int y = 6;	//6的二进制为00000000 00000000 00000000 00000110
		System.out.println(x & y);	//输出2
		System.out.println(x | y);	//输出7
		System.out.println(x ^ y);	//位相同为0，不同为1.输出5
		
		x = -3;	//-3的二进制为10000000 00000000 00000000 00000011, 反码为11111111 11111111 11111111 11111100, 补码为11111111 11111111 11111111 11111101
		y = -6;	//-6的二进制为10000000 00000000 00000000 00000110, 反码为11111111 11111111 11111111 11111001, 补码为11111111 11111111 11111111 11111010
		System.out.println(x & y);	//补码与之后为11111111 11111111 11111111 11111000, 反码（补码减1）为11111111 11111111 11111111 11110111, 原码（反码取反，如果第一位为1，则表明是负数，负数符号位不取反）为10000000 00000000 00000000 00001000.因此输出-8
		System.out.println(x | y);	//输出-1
		System.out.println(x ^ y);	//输出7（注意：符号位也进行运算。由于前面29为预算后都为0，所以结果变成正数）

		int x1 = 3;	//3的二进制为00000000 00000000 00000000 00000011
		int y1 = -3;	//-3的二进制为10000000 00000000 00000000 00000011
		System.out.println(~x1);	//正数直接按原码取反为11111111 11111111 11111111 11111100，但这是一个负数的补码，因此该负数的反码为11111111 11111111 11111111 11111011，原码为10000000 00000000 00000000 00000100，输出-4
		System.out.println(~y1);	//补码为11111111 11111111 11111111 11111101，取反为00000000 00000000 00000000 00000010，输出2

	}
}
