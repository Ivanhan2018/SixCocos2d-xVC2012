package main
 
import (
    "fmt"
    "time"
    "os"	
)

type ZmodnZObj struct {
   m_k,m_mod int
}

var g_Z4Add [][]int=[][]int{//GAP4中Z/4Z的加法表，0*a a   2*a -a对应0 1 2 3
	{1,2,3,4},
	{2,3,4,1},
	{3,4,1,2},
	{4,1,2,3},
}

var g_Z4Mul [][]int=[][]int{//GAP4中Z/4Z的乘法表，0*a a   2*a -a对应0 1 2 3
	{1,1,1,1},
	{1,2,3,4},
	{1,3,1,3},
	{1,4,3,2},
}

var g_R4_2Mul [][]int=[][]int{//GAP4中R4_2的乘法表，0*a a   2*a -a对应0 1 2 3
	{1,1,1,1},
	{1,3,1,3},
	{1,1,1,1},
	{1,3,1,3},
}

var g_R4_1Mul [][]int=[][]int{
	{1,1,1,1},
	{1,1,1,1},
	{1,1,1,1},
	{1,1,1,1},
}

var g_M4Mul [][]int=[][]int{
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
	{0,0,0,0},
}

var g_F4Add [][]int=[][]int{
	{0,1,2,3},
	{1,0,3,2},
	{2,3,0,1},
	{3,2,1,0},
}

var g_F4Mul [][]int=[][]int{
	{0,0,0,0},
	{0,1,2,3},
	{0,2,3,1},
	{0,3,1,2},
}

var g_F2F2Mul [][]int=[][]int{//F_2×F_2的乘法表，0,1,v,1+v对应0,1,2,3
	{0,0,0,0},
	{0,1,2,3},
	{0,2,2,0},
	{0,3,0,3},
}

var g_R4_9Mul [][]int=[][]int{//GAP4中R4_9=F_2[x]/(x^2)的乘法表，0*a b   a   a+b对应0 1 2 3
	{0,0,0,0},
	{0,2,1,3},
	{0,1,2,3},
	{0,3,3,0},
}

var g_R4_8Mul [][]int=[][]int{//GAP4中R4_8的乘法表，0*a b   a   a+b对应0 1 2 3
	{0,0,0,0},
	{0,0,1,1},
	{0,0,2,2},
	{0,0,3,3},
}

var g_R4_7Mul [][]int=[][]int{//GAP4中R4_7的乘法表，0*a b   a   a+b对应0 1 2 3
	{0,0,0,0},
	{0,0,0,0},
	{0,1,2,3},
	{0,1,2,3},
}

var g_R4_6Mul [][]int=[][]int{//GAP4中M_2×F_2的乘法表，0*a b   a   a+b对应0 1 2 3
	{0,0,0,0},
	{0,0,0,0},
	{0,0,2,2},
	{0,0,2,2},
}

var g_R4_5Mul [][]int=[][]int{//GAP4中R4_5的乘法表，0*a b   a   a+b对应0 1 2 3
	{0,0,0,0},
	{0,0,0,0},
	{0,0,1,1},
	{0,0,1,1},
}

var g_R8_45Add [][]int=[][]int{
	{1,2,3,4,5,6,7,8},
	{2,1,4,3,6,5,8,7},
	{3,4,1,2,7,8,5,6},
	{4,3,2,1,8,7,6,5},
	{5,6,7,8,1,2,3,4},
	{6,5,8,7,2,1,4,3},
	{7,8,5,6,3,4,1,2},
	{8,7,6,5,4,3,2,1},
}

var g_R8_45Mul [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,2,3,4,5,6,7,8},
	{1,3,1,3,1,3,1,3},
	{1,4,3,2,5,8,7,6},	
	{1,5,1,5,1,5,1,5},
	{1,6,3,8,5,2,7,4},	
	{1,7,1,7,1,7,1,7},
	{1,8,3,6,5,4,7,2},		
}

var g_R8_33Mul [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,3,5,7,1,3,5,7},
	{1,5,1,5,1,5,1,5},
	{1,7,5,3,1,7,5,3},	
	{1,1,1,1,1,1,1,1},
	{1,3,5,7,1,3,5,7},	
	{1,5,1,5,1,5,1,5},
	{1,7,5,3,1,7,5,3},		
}

var g_R8_16_2Add [][]int=[][]int{
	{1,2,3,4,5,6,7,8},
	{2,3,4,1,6,7,8,5},
	{3,4,1,2,7,8,5,6},
	{4,1,2,3,8,5,6,7},
	{5,6,7,8,1,2,3,4},
	{6,7,8,5,2,3,4,1},
	{7,8,5,6,3,4,1,2},
	{8,5,6,7,4,1,2,3},
}

var g_R8_16_2Mul [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,3,1,3,1,3,1,3},
	{1,1,1,1,1,1,1,1},
	{1,3,1,3,1,3,1,3},	
	{1,1,1,1,1,1,1,1},
	{1,3,1,3,1,3,1,3},	
	{1,1,1,1,1,1,1,1},
	{1,3,1,3,1,3,1,3},		
}

var g_R8_6Add [][]int=[][]int{
	{1,2,3,4,5,6,7,8},
	{2,1,4,3,6,5,8,7},
	{3,4,5,6,7,8,1,2},
	{4,3,6,5,8,7,2,1},
	{5,6,7,8,1,2,3,4},
	{6,5,8,7,2,1,4,3},
	{7,8,1,2,3,4,5,6},
	{8,7,2,1,4,3,6,5},
}

var g_R8_6Mul [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,5,1,5,1,5,1,5},
	{1,1,1,1,1,1,1,1},
	{1,5,1,5,1,5,1,5},	
	{1,1,1,1,1,1,1,1},
	{1,5,1,5,1,5,1,5},	
	{1,1,1,1,1,1,1,1},
	{1,5,1,5,1,5,1,5},		
}

var g_R8_16Mul [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,1,1,1,1,1,1,1},
	{1,1,5,5,1,1,5,5},
	{1,1,5,5,1,1,5,5},
	{1,1,1,1,1,1,1,1},	
	{1,1,1,1,1,1,1,1},
	{1,1,5,5,1,1,5,5},	
	{1,1,5,5,1,1,5,5},		
}

var g_R8_23Mul [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,1,1,1,1,1,1,1},
	{1,1,2,2,1,1,2,2},
	{1,1,2,2,1,1,2,2},
	{1,1,1,1,1,1,1,1},	
	{1,1,1,1,1,1,1,1},
	{1,1,2,2,1,1,2,2},	
	{1,1,2,2,1,1,2,2},		
}

var g_F8Add [][]int=[][]int{
{1,2,3,4,5,6,7,8},
{2,1,4,3,6,5,8,7},
{3,4,1,2,7,8,5,6},
{4,3,2,1,8,7,6,5},
{5,6,7,8,1,2,3,4},
{6,5,8,7,2,1,4,3},
{7,8,5,6,3,4,1,2},
{8,7,6,5,4,3,2,1},
}

var g_F8Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8},
{1,3,5,7,4,2,8,6},
{1,4,7,6,8,5,2,3},
{1,5,4,8,7,3,6,2},
{1,6,2,5,3,8,4,7},
{1,7,8,2,6,4,3,5},
{1,8,6,3,2,7,5,4},
}


var g_R8_51Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8},
{1,3,5,7,2,4,6,8},
{1,4,7,6,6,7,4,1},
{1,5,2,6,3,7,4,8},
{1,6,4,7,7,4,6,1},
{1,7,6,4,4,6,7,1},
{1,8,8,1,8,1,1,8},
}

var g_R8_48Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8},
{1,3,5,7,3,1,7,5},
{1,4,7,6,7,6,1,4},
{1,5,3,7,5,1,7,3},
{1,6,1,6,1,6,1,6},
{1,7,7,1,7,1,1,7},
{1,8,5,4,3,6,7,2},
}

var g_R8_46Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8},
{1,3,5,7,8,6,4,2},
{1,4,7,6,4,1,6,7},
{1,5,8,4,2,6,7,3},
{1,6,6,1,6,1,1,6},
{1,7,4,6,7,1,6,4},
{1,8,2,7,3,6,4,5},
}

var g_R8_8Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1},
{1,1,5,5,1,1,5,5},
{1,1,1,1,1,1,1,1},
{1,1,5,5,1,1,5,5},
{1,1,1,1,1,1,1,1},
{1,1,5,5,1,1,5,5},
{1,1,1,1,1,1,1,1},
{1,1,5,5,1,1,5,5},
}

var g_R8_9Mul [][]int=[][]int{
 {1,1,1,1,1,1,1,1},
 {1,5,5,1,1,5,5,1},
 {1,1,1,1,1,1,1,1},
 {1,5,5,1,1,5,5,1},
 {1,1,1,1,1,1,1,1},
 {1,5,5,1,1,5,5,1},
 {1,1,1,1,1,1,1,1},
 {1,5,5,1,1,5,5,1},
}

var g_R8_10Mul [][]int=[][]int{
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {1,5,1,5,1,5,1,5},
 {1,5,1,5,1,5,1,5},
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {1,5,1,5,1,5,1,5},
 {1,5,1,5,1,5,1,5},
}

var g_R8_12Mul [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,5,5,1,1,5,5,1},
	{1,5,1,5,1,5,1,5},
	{1,1,5,5,1,1,5,5},
	{1,1,1,1,1,1,1,1},
	{1,5,5,1,1,5,5,1},
	{1,5,1,5,1,5,1,5},
	{1,1,5,5,1,1,5,5},
}

var g_R8_24Add [][]int=[][]int{
	{1,2,3,4,5,6,7,8},
	{2,1,4,3,6,5,8,7},
	{3,4,5,6,7,8,1,2},
	{4,3,6,5,8,7,2,1},
	{5,6,7,8,1,2,3,4},
	{6,5,8,7,2,1,4,3},
	{7,8,1,2,3,4,5,6},
	{8,7,2,1,4,3,6,5},
}

var g_R8_810Add [][]int=[][]int{
	{1,2,3,4,5,6,7,8},
	{2,4,7,5,1,8,6,3},
	{3,7,1,6,8,4,2,5},
	{4,5,6,1,2,3,8,7},
	{5,1,8,2,4,7,3,6},
	{6,8,4,3,7,1,5,2},
	{7,6,2,8,3,5,4,1},
	{8,3,5,7,6,2,1,4},
}

var g_R8_810Mul [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,4,4,1,4,4,1,1},
	{1,1,1,1,1,1,1,1},
	{1,1,1,1,1,1,1,1},
	{1,4,4,1,4,4,1,1},
	{1,1,1,1,1,1,1,1},
	{1,4,4,1,4,4,1,1},
	{1,4,4,1,4,4,1,1},
}

var g_R8_16Add2 [][]int=[][]int{
	{1,2,3,4,5,6,7,8},
	{2,1,4,3,6,5,8,7},
	{3,4,6,5,7,8,2,1},
	{4,3,5,6,8,7,1,2},
	{5,6,7,8,1,2,3,4},
	{6,5,8,7,2,1,4,3},
	{7,8,2,1,3,4,6,5},
	{8,7,1,2,4,3,5,6},
}

var g_R8_16Mul2 [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,1,1,1,1,1,1,1},
	{1,1,6,6,1,1,6,6},
	{1,1,6,6,1,1,6,6},
	{1,1,1,1,1,1,1,1},
	{1,1,1,1,1,1,1,1},
	{1,1,6,6,1,1,6,6},
	{1,1,6,6,1,1,6,6},
}

var g_R8_19Add [][]int=[][]int{
	{1,2,3,4,5,6,7,8},
	{2,3,4,1,6,7,8,5},
	{3,4,1,2,7,8,5,6},
	{4,1,2,3,8,5,6,7},
	{5,6,7,8,3,4,1,2},
	{6,7,8,5,4,1,2,3},
	{7,8,5,6,1,2,3,4},
	{8,5,6,7,2,3,4,1},
}

var g_R8_19Mul [][]int=[][]int{
	{1,1,1,1,1,1,1,1},
	{1,3,1,3,1,3,1,3},
	{1,1,1,1,1,1,1,1},
	{1,3,1,3,1,3,1,3},
	{1,1,1,1,3,3,3,3},
	{1,3,1,3,3,1,3,1},
	{1,1,1,1,3,3,3,3},
	{1,3,1,3,3,1,3,1},
}

var g_R16_382Add [][]int=[][]int{
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15},
{3,4,1,2,7,8,5,6,11,12,9,10,15,16,13,14},
{4,3,2,1,8,7,6,5,12,11,10,9,16,15,14,13},
{5,6,7,8,1,2,3,4,13,14,15,16,9,10,11,12},
{6,5,8,7,2,1,4,3,14,13,16,15,10,9,12,11},
{7,8,5,6,3,4,1,2,15,16,13,14,11,12,9,10},
{8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9},
{9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8},
{10,9,12,11,14,13,16,15,2,1,4,3,6,5,8,7},
{11,12,9,10,15,16,13,14,3,4,1,2,7,8,5,6},
{12,11,10,9,16,15,14,13,4,3,2,1,8,7,6,5},
{13,14,15,16,9,10,11,12,5,6,7,8,1,2,3,4},
{14,13,16,15,10,9,12,11,6,5,8,7,2,1,4,3},
{15,16,13,14,11,12,9,10,7,8,5,6,3,4,1,2},
{16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1},
}

var g_R16_382Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,3,5,7,9,11,13,15,15,13,11,9,7,5,3,1},
{1,4,7,6,13,16,11,10,7,6,1,4,11,10,13,16},
{1,5,9,13,15,11,7,3,3,7,11,15,13,9,5,1},
{1,6,11,16,11,16,1,6,11,16,1,6,1,6,11,16},
{1,7,13,11,7,1,11,13,13,11,1,7,11,13,7,1},
{1,8,15,10,3,6,13,12,5,4,11,14,7,2,9,16},
{1,9,15,7,3,11,13,5,5,13,11,3,7,15,9,1},
{1,10,13,6,7,16,11,4,13,6,1,10,11,4,7,16},
{1,11,11,1,11,1,1,11,11,1,1,11,1,11,11,1},
{1,12,9,4,15,6,7,14,3,10,11,2,13,8,5,16},
{1,13,7,11,13,1,11,7,7,11,1,13,11,7,13,1},
{1,14,5,10,9,6,13,2,15,4,11,8,7,12,3,16},
{1,15,3,13,5,11,7,9,9,7,11,5,13,3,15,1},
{1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16},
}

var g_R16_385Add [][]int=[][]int{
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15},
{3,4,1,2,7,8,5,6,11,12,9,10,15,16,13,14},
{4,3,2,1,8,7,6,5,12,11,10,9,16,15,14,13},
{5,6,7,8,1,2,3,4,13,14,15,16,9,10,11,12},
{6,5,8,7,2,1,4,3,14,13,16,15,10,9,12,11},
{7,8,5,6,3,4,1,2,15,16,13,14,11,12,9,10},
{8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9},
{9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8},
{10,9,12,11,14,13,16,15,2,1,4,3,6,5,8,7},
{11,12,9,10,15,16,13,14,3,4,1,2,7,8,5,6},
{12,11,10,9,16,15,14,13,4,3,2,1,8,7,6,5},
{13,14,15,16,9,10,11,12,5,6,7,8,1,2,3,4},
{14,13,16,15,10,9,12,11,6,5,8,7,2,1,4,3},
{15,16,13,14,11,12,9,10,7,8,5,6,3,4,1,2},
{16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1},
}

var g_R16_385Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,3,5,7,9,11,13,15,1,3,5,7,9,11,13,15},
{1,4,7,6,13,16,11,10,9,12,15,14,5,8,3,2},
{1,5,9,13,1,5,9,13,1,5,9,13,1,5,9,13},
{1,6,11,16,5,2,15,12,9,14,3,8,13,10,7,4},
{1,7,13,11,9,15,5,3,1,7,13,11,9,15,5,3},
{1,8,15,10,13,12,3,6,9,16,7,2,5,4,11,14},
{1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9},
{1,10,3,12,5,14,7,16,9,2,11,4,13,6,15,8},
{1,11,5,15,9,3,13,7,1,11,5,15,9,3,13,7},
{1,12,7,14,13,8,11,2,9,4,15,6,5,16,3,10},
{1,13,9,5,1,13,9,5,1,13,9,5,1,13,9,5},
{1,14,11,8,5,10,15,4,9,6,3,16,13,2,7,12},
{1,15,13,3,9,7,5,11,1,15,13,3,9,7,5,11},
{1,16,15,2,13,4,3,14,9,8,7,10,5,12,11,6},
}

var g_R16_300Add [][]int=[][]int{
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{2,1,10,12,11,14,13,16,15,3,5,4,7,6,9,8},
{3,10,1,11,12,13,14,15,16,2,4,5,6,7,8,9},
{4,12,11,1,10,16,15,14,13,5,3,2,9,8,7,6},
{5,11,12,10,1,15,16,13,14,4,2,3,8,9,6,7},
{6,14,13,16,15,1,10,12,11,7,9,8,3,2,5,4},
{7,13,14,15,16,10,1,11,12,6,8,9,2,3,4,5},
{8,16,15,14,13,12,11,1,10,9,7,6,5,4,3,2},
{9,15,16,13,14,11,12,10,1,8,6,7,4,5,2,3},
{10,3,2,5,4,7,6,9,8,1,12,11,14,13,16,15},
{11,5,4,3,2,9,8,7,6,12,1,10,16,15,14,13},
{12,4,5,2,3,8,9,6,7,11,10,1,15,16,13,14},
{13,7,6,9,8,3,2,5,4,14,16,15,1,10,12,11},
{14,6,7,8,9,2,3,4,5,13,15,16,10,1,11,12},
{15,9,8,7,6,5,4,3,2,16,14,13,12,11,1,10},
{16,8,9,6,7,4,5,2,3,15,13,14,11,12,10,1},
}

var g_R16_300Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,3,3,3,3,7,7,7,7,1,1,1,14,14,14,14},
{1,4,5,2,3,9,8,7,6,10,11,12,14,13,16,15},
{1,5,5,5,5,8,8,8,8,1,1,1,13,13,13,13},
{1,6,3,15,12,2,7,11,16,13,8,5,10,14,4,9},
{1,7,3,14,1,3,7,1,14,14,7,3,1,14,3,7},
{1,8,5,13,1,5,8,1,13,13,8,5,1,13,5,8},
{1,9,5,16,12,4,8,11,15,14,7,3,10,13,2,6},
{1,10,1,11,12,10,1,11,12,10,11,12,10,1,11,12},
{1,11,12,10,1,12,11,1,10,10,11,12,1,10,12,11},
{1,12,12,12,12,11,11,11,11,1,1,1,10,10,10,10},
{1,13,1,8,5,13,1,8,5,13,8,5,13,1,8,5},
{1,14,1,7,3,14,1,7,3,14,7,3,14,1,7,3},
{1,15,12,6,3,16,11,7,2,13,8,5,14,10,9,4},
{1,16,12,9,5,15,11,8,4,14,7,3,13,10,6,2},
}

var g_R16_101Add [][]int=[][]int{
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{2,4,8,5,1,11,12,13,16,7,9,15,14,3,10,6},
{3,8,6,13,14,7,1,11,15,5,12,2,9,16,4,10},
{4,5,13,1,2,9,15,14,6,12,16,10,3,8,7,11},
{5,1,14,2,4,16,10,3,11,15,6,7,8,13,12,9},
{6,11,7,9,16,1,3,12,4,14,2,8,15,10,13,5},
{7,12,1,15,10,3,6,2,13,16,8,11,4,5,9,14},
{8,13,11,14,3,12,2,9,10,1,15,4,16,6,5,7},
{9,16,15,6,11,4,13,10,1,8,5,14,7,12,3,2},
{10,7,5,12,15,14,16,1,8,9,3,6,2,4,11,13},
{11,9,12,16,6,2,8,15,5,3,4,13,10,7,14,1},
{12,15,2,10,7,8,11,4,14,6,13,9,5,1,16,3},
{13,14,9,3,8,15,4,16,7,2,10,5,6,11,1,12},
{14,3,16,8,13,10,5,6,12,4,7,1,11,9,2,15},
{15,10,4,7,12,13,9,5,3,11,14,16,1,2,6,8},
{16,6,10,11,9,5,14,7,2,13,1,3,12,15,8,4},
}

var g_R16_101Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,4,6,1,4,1,6,9,1,9,4,9,6,9,6,4},
{1,4,6,1,4,1,6,9,1,9,4,9,6,9,6,4},
{1,5,7,4,2,6,3,10,9,8,16,14,15,12,13,11},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,4,6,1,4,1,6,9,1,9,4,9,6,9,6,4},
{1,5,7,4,2,6,3,10,9,8,16,14,15,12,13,11},
{1,4,6,1,4,1,6,9,1,9,4,9,6,9,6,4},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,5,7,4,2,6,3,10,9,8,16,14,15,12,13,11},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,5,7,4,2,6,3,10,9,8,16,14,15,12,13,11},
}

var g_R16_102Add [][]int=[][]int{
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{2,4,8,5,1,11,12,13,16,7,9,15,14,3,10,6},
{3,8,6,13,14,7,1,11,15,5,12,2,9,16,4,10},
{4,5,13,1,2,9,15,14,6,12,16,10,3,8,7,11},
{5,1,14,2,4,16,10,3,11,15,6,7,8,13,12,9},
{6,11,7,9,16,1,3,12,4,14,2,8,15,10,13,5},
{7,12,1,15,10,3,6,2,13,16,8,11,4,5,9,14},
{8,13,11,14,3,12,2,9,10,1,15,4,16,6,5,7},
{9,16,15,6,11,4,13,10,1,8,5,14,7,12,3,2},
{10,7,5,12,15,14,16,1,8,9,3,6,2,4,11,13},
{11,9,12,16,6,2,8,15,5,3,4,13,10,7,14,1},
{12,15,2,10,7,8,11,4,14,6,13,9,5,1,16,3},
{13,14,9,3,8,15,4,16,7,2,10,5,6,11,1,12},
{14,3,16,8,13,10,5,6,12,4,7,1,11,9,2,15},
{15,10,4,7,12,13,9,5,3,11,14,16,1,2,6,8},
{16,6,10,11,9,5,14,7,2,13,1,3,12,15,8,4},
}

var g_R16_102Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,2,4,4,5,1,4,5,4,2,2,5,1,2,1,5},
{1,3,6,6,7,1,6,7,6,3,3,7,1,3,1,7},
{1,4,1,1,4,1,1,4,1,4,4,4,1,4,1,4},
{1,5,4,4,2,1,4,2,4,5,5,2,1,5,1,2},
{1,6,1,1,6,1,1,6,1,6,6,6,1,6,1,6},
{1,7,6,6,3,1,6,3,6,7,7,3,1,7,1,3},
{1,8,9,9,10,1,9,10,9,8,8,10,1,8,1,10},
{1,9,1,1,9,1,1,9,1,9,9,9,1,9,1,9},
{1,10,9,9,8,1,9,8,9,10,10,8,1,10,1,8},
{1,11,4,4,16,1,4,16,4,11,11,16,1,11,1,16},
{1,12,9,9,14,1,9,14,9,12,12,14,1,12,1,14},
{1,13,6,6,15,1,6,15,6,13,13,15,1,13,1,15},
{1,14,9,9,12,1,9,12,9,14,14,12,1,14,1,12},
{1,15,6,6,13,1,6,13,6,15,15,13,1,15,1,13},
{1,16,4,4,11,1,4,11,4,16,16,11,1,16,1,11},
}

var g_R16_103Add [][]int=[][]int{
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{2,3,4,1,6,7,8,5,10,11,12,9,14,15,16,13},
{3,4,1,2,7,8,5,6,11,12,9,10,15,16,13,14},
{4,1,2,3,8,5,6,7,12,9,10,11,16,13,14,15},
{5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4},
{6,7,8,5,10,11,12,9,14,15,16,13,2,3,4,1},
{7,8,5,6,11,12,9,10,15,16,13,14,3,4,1,2},
{8,5,6,7,12,9,10,11,16,13,14,15,4,1,2,3},
{9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8},
{10,11,12,9,14,15,16,13,2,3,4,1,6,7,8,5},
{11,12,9,10,15,16,13,14,3,4,1,2,7,8,5,6},
{12,9,10,11,16,13,14,15,4,1,2,3,8,5,6,7},
{13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12},
{14,15,16,13,2,3,4,1,6,7,8,5,10,11,12,9},
{15,16,13,14,3,4,1,2,7,8,5,6,11,12,9,10},
{16,13,14,15,4,1,2,3,8,5,6,7,12,9,10,11},
}

var g_R16_103Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3},
{1,1,1,1,9,9,9,9,1,1,1,1,9,9,9,9},
{1,3,1,3,9,11,9,11,1,3,1,3,9,11,9,11},
{1,1,1,1,9,9,9,9,1,1,1,1,9,9,9,9},
{1,3,1,3,9,11,9,11,1,3,1,3,9,11,9,11},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3},
{1,1,1,1,9,9,9,9,1,1,1,1,9,9,9,9},
{1,3,1,3,9,11,9,11,1,3,1,3,9,11,9,11},
{1,1,1,1,9,9,9,9,1,1,1,1,9,9,9,9},
{1,3,1,3,9,11,9,11,1,3,1,3,9,11,9,11},
}

var g_R16_104Add [][]int=[][]int{
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{2,4,8,5,1,11,12,13,16,7,9,15,14,3,10,6},
{3,8,6,13,14,7,1,11,15,5,12,2,9,16,4,10},
{4,5,13,1,2,9,15,14,6,12,16,10,3,8,7,11},
{5,1,14,2,4,16,10,3,11,15,6,7,8,13,12,9},
{6,11,7,9,16,1,3,12,4,14,2,8,15,10,13,5},
{7,12,1,15,10,3,6,2,13,16,8,11,4,5,9,14},
{8,13,11,14,3,12,2,9,10,1,15,4,16,6,5,7},
{9,16,15,6,11,4,13,10,1,8,5,14,7,12,3,2},
{10,7,5,12,15,14,16,1,8,9,3,6,2,4,11,13},
{11,9,12,16,6,2,8,15,5,3,4,13,10,7,14,1},
{12,15,2,10,7,8,11,4,14,6,13,9,5,1,16,3},
{13,14,9,3,8,15,4,16,7,2,10,5,6,11,1,12},
{14,3,16,8,13,10,5,6,12,4,7,1,11,9,2,15},
{15,10,4,7,12,13,9,5,3,11,14,16,1,2,6,8},
{16,6,10,11,9,5,14,7,2,13,1,3,12,15,8,4},
}

var g_R16_104Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,3,13,6,7,6,15,9,1,9,7,4,15,4,13,3},
{1,4,6,1,4,1,6,9,1,9,4,9,6,9,6,4},
{1,5,7,4,2,6,3,10,9,8,16,14,15,12,13,11},
{1,6,6,1,6,1,6,1,1,1,6,1,6,1,6,6},
{1,7,15,6,3,6,13,9,1,9,3,4,13,4,15,7},
{1,8,9,9,10,1,9,10,9,8,8,10,1,8,1,10},
{1,9,1,1,9,1,1,9,1,9,9,9,1,9,1,9},
{1,10,9,9,8,1,9,8,9,10,10,8,1,10,1,8},
{1,11,7,4,16,6,3,8,9,10,2,12,15,14,13,5},
{1,12,4,9,14,1,4,10,9,8,12,10,6,8,6,14},
{1,13,15,6,15,6,13,1,1,1,15,6,13,6,15,13},
{1,14,4,9,12,1,4,8,9,10,14,8,6,10,6,12},
{1,15,13,6,13,6,15,1,1,1,13,6,15,6,13,15},
{1,16,3,4,11,6,7,10,9,8,5,14,13,12,15,2},
}

var g_R16_105Add [][]int=[][]int{
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{2,3,4,1,6,7,8,5,10,11,12,9,14,15,16,13},
{3,4,1,2,7,8,5,6,11,12,9,10,15,16,13,14},
{4,1,2,3,8,5,6,7,12,9,10,11,16,13,14,15},
{5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4},
{6,7,8,5,10,11,12,9,14,15,16,13,2,3,4,1},
{7,8,5,6,11,12,9,10,15,16,13,14,3,4,1,2},
{8,5,6,7,12,9,10,11,16,13,14,15,4,1,2,3},
{9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8},
{10,11,12,9,14,15,16,13,2,3,4,1,6,7,8,5},
{11,12,9,10,15,16,13,14,3,4,1,2,7,8,5,6},
{12,9,10,11,16,13,14,15,4,1,2,3,8,5,6,7},
{13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12},
{14,15,16,13,2,3,4,1,6,7,8,5,10,11,12,9},
{15,16,13,14,3,4,1,2,7,8,5,6,11,12,9,10},
{16,13,14,15,4,1,2,3,8,5,6,7,12,9,10,11},
}

var g_R16_105Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,3,1,3,9,11,9,11,1,3,1,3,9,11,9,11},
{1,4,3,2,13,16,15,14,9,12,11,10,5,8,7,6},
{1,5,9,13,4,8,12,16,3,7,11,15,2,6,10,14},
{1,6,11,16,8,9,14,3,11,16,1,6,14,3,8,9},
{1,7,9,15,12,14,4,6,3,5,11,13,10,16,2,8},
{1,8,11,14,16,3,6,9,11,14,1,8,6,9,16,3},
{1,9,1,9,3,11,3,11,1,9,1,9,3,11,3,11},
{1,10,3,12,7,16,5,14,9,2,11,4,15,8,13,6},
{1,11,1,11,11,1,11,1,1,11,1,11,11,1,11,1},
{1,12,3,10,15,6,13,8,9,4,11,2,7,14,5,16},
{1,13,9,5,2,14,10,6,3,15,11,7,4,16,12,8},
{1,14,11,8,6,3,16,9,11,8,1,14,16,9,6,3},
{1,15,9,7,10,8,2,16,3,13,11,5,12,6,4,14},
{1,16,11,6,14,9,8,3,11,6,1,16,8,3,14,9},
}

var g_R16_106Add [][]int=[][]int{
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{2,3,4,1,6,7,8,5,10,11,12,9,14,15,16,13},
{3,4,1,2,7,8,5,6,11,12,9,10,15,16,13,14},
{4,1,2,3,8,5,6,7,12,9,10,11,16,13,14,15},
{5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4},
{6,7,8,5,10,11,12,9,14,15,16,13,2,3,4,1},
{7,8,5,6,11,12,9,10,15,16,13,14,3,4,1,2},
{8,5,6,7,12,9,10,11,16,13,14,15,4,1,2,3},
{9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8},
{10,11,12,9,14,15,16,13,2,3,4,1,6,7,8,5},
{11,12,9,10,15,16,13,14,3,4,1,2,7,8,5,6},
{12,9,10,11,16,13,14,15,4,1,2,3,8,5,6,7},
{13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12},
{14,15,16,13,2,3,4,1,6,7,8,5,10,11,12,9},
{15,16,13,14,3,4,1,2,7,8,5,6,11,12,9,10},
{16,13,14,15,4,1,2,3,8,5,6,7,12,9,10,11},
}

var g_R16_106Mul [][]int=[][]int{
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
{1,3,1,3,9,11,9,11,1,3,1,3,9,11,9,11},
{1,4,3,2,13,16,15,14,9,12,11,10,5,8,7,6},
{1,5,9,13,16,4,8,12,11,15,3,7,6,10,14,2},
{1,6,11,16,4,5,10,15,3,8,9,14,2,7,12,13},
{1,7,9,15,8,10,16,2,11,13,3,5,14,4,6,12},
{1,8,11,14,12,15,2,5,3,6,9,16,10,13,4,7},
{1,9,1,9,11,3,11,3,1,9,1,9,11,3,11,3},
{1,10,3,12,15,8,13,6,9,2,11,4,7,16,5,14},
{1,11,1,11,3,9,3,9,1,11,1,11,3,9,3,9},
{1,12,3,10,7,14,5,16,9,4,11,2,15,6,13,8},
{1,13,9,5,6,2,14,10,11,7,3,15,16,12,8,4},
{1,14,11,8,10,7,4,13,3,16,9,6,12,5,2,15},
{1,15,9,7,14,12,6,4,11,5,3,13,8,2,16,10},
{1,16,11,6,2,13,12,7,3,14,9,8,4,15,10,5},
}
	
var g_Z4 []ZmodnZObj=[]ZmodnZObj{
   ZmodnZObj{0,4},
   ZmodnZObj{1,4},
   ZmodnZObj{2,4},
   ZmodnZObj{3,4}}
   
var g_Z5 []ZmodnZObj=[]ZmodnZObj{
   ZmodnZObj{0,5},
   ZmodnZObj{1,5},
   ZmodnZObj{2,5},
   ZmodnZObj{3,5},   
   ZmodnZObj{4,5}}
   
var g_Z6 []ZmodnZObj=[]ZmodnZObj{
   ZmodnZObj{0,6},
   ZmodnZObj{1,6},
   ZmodnZObj{2,6},
   ZmodnZObj{3,6},   
   ZmodnZObj{4,6}} 
   
func (this *ZmodnZObj) isEqual(a ZmodnZObj) bool {
  return (this.m_k==a.m_k && this.m_mod==a.m_mod)
 }
 
func (this *ZmodnZObj) getName() string {
  return fmt.Sprintf("ZmodnZObj(%d,%d)",this.m_k,this.m_mod)
}
 
func (this *ZmodnZObj) Add(a ZmodnZObj) ZmodnZObj {
	var ret ZmodnZObj
	ret.m_mod=this.m_mod
	ret.m_k=(this.m_k+a.m_k)%this.m_mod
	return ret
 }
 
func (this *ZmodnZObj) InvAdd() ZmodnZObj {
	var ret ZmodnZObj
	ret.m_mod=this.m_mod
	ret.m_k=(this.m_mod*2-this.m_k)%this.m_mod
	return ret
 }
 
func (this *ZmodnZObj) Mul(a ZmodnZObj) ZmodnZObj {
	var ret ZmodnZObj
	ret.m_mod=this.m_mod
	ret.m_k=(this.m_k*a.m_k)%this.m_mod
	return ret
 }

//InverseMutable(a ZmodnZObj) bool {
func (this *ZmodnZObj) InvMul(a ZmodnZObj) ZmodnZObj {
	var ret ZmodnZObj
	for i:=0;i<this.m_mod;i++ {
	    ret=ZmodnZObj{this.m_mod,i}
		if(ret.Mul(a)==ZmodnZObj{this.m_mod,1}){
			return ret
		}
	}	
	return ZmodnZObj{0,0}
 }
 
func (this *ZmodnZObj) Idx(v *[]ZmodnZObj) int {
  for i:=0;i<len(*v);i++ {
   if(this.isEqual((*v)[i])){
    return i
	}
  }
  return -1
 } 
 
func IsInFR(v *[]int,m int)int {
	for i:=0;i<len((*v));i++{
		if((*v)[i]==m){
			return i;
		}
	}
	return -1;
}

func FR(A *[][]int,M *[][]int,v *[]int)[]int {

	FR := []int{}
	for i:=0;i<len((*v));i++{
		FR=append(FR,(*v)[i])
	}	
	var cnt,cnt1 int
	cnt1=cnt	
    for {
	    cnt=len(FR)
		for i:=0;i<cnt;i++{
			for j:=0;j<cnt;j++{
			IJ:=(*A)[FR[i]-1][FR[j]-1];
			bIn := IsInFR(&FR,IJ)
			if(bIn==-1){
			FR=append(FR,IJ)
			}
			IJ1:=(*M)[FR[i]-1][FR[j]-1];			
			bIn1 := IsInFR(&FR,IJ1)
			if(bIn1==-1){
			FR=append(FR,IJ1)
			}			
		}
		}
		cnt1=len(FR)
     if cnt1==cnt {
            break
        }
    }
	BubbleSort(&FR)
    return FR
}

func BubbleSort(arr *[]int){
    //fmt.Println("排序前arr=",(*arr))
    temp := 0
    for i := 0;i < len(*arr) - 1;i++{
        for j := 0 ;j<len(*arr) -1 - i;j++{
            if((*arr)[j] > (*arr)[j+1]){
                temp = (*arr)[j]
                (*arr)[j] = (*arr)[j+1]
                (*arr)[j+1] = temp
            }
        }
    }
    //fmt.Println("排序后arr=",(*arr))
}

func Order(n,m int)[]int {
	ret := []int{}
	var mi int=m
    for {
        if mi==0 {
            break
        }
        ret=append(ret,mi)
        mi=(mi+m)%n
    }	
	ret=append(ret,mi)
	BubbleSort(&ret)
	return ret
}

func ToNormal(v *[]int,a int)int {
	for i:=0;i<len(*v);i++ {
		if((*v)[i]==a){
			return i
		}
	}
	return -1
}

//Zn=Z/nZ=1Z/nZ=ZnmTable(n,1)
func ZnTable(n int)([][]int,[][]int){
	vZn := []ZmodnZObj{}
	for i:=0;i<n;i++{
		vZn=append(vZn,ZmodnZObj{i,n})
	}
    vvAdd:=[][]int{}
    vvMul:=[][]int{}
	 for i:=0;i<n;i++{
	  I:=[]int{}
	  I1:=[]int{}
	  for j:=0;j<n;j++{
	   IJ:=vZn[i].Add(vZn[j])
	   ij:=IJ.Idx(&vZn)
	   I = append(I,ij+1)
	   IJ1:=vZn[i].Mul(vZn[j])
	   ij1:=IJ1.Idx(&vZn)
	   I1 = append(I1,ij1+1)	   
	  }
	  vvAdd = append(vvAdd,I)
	  vvMul = append(vvMul,I1)	  
	 }
	 return vvAdd,vvMul
}

//循环环mZ/nZ=RingByGenerators([ZmodnZObj(m,n)])
func ZnmTable(n,m int)([][]int,[][]int){
	vZnm := Order(n,m)
	s:=len(vZnm)
	vZn := []ZmodnZObj{}
	for i:=0;i<s;i++{
		vZn=append(vZn,ZmodnZObj{vZnm[i],n})
	}
    vvAdd:=[][]int{}
    vvMul:=[][]int{}
	 for i:=0;i<s;i++{
	  I:=[]int{}
	  I1:=[]int{}
	  for j:=0;j<s;j++{
	   IJ:=vZn[i].Add(vZn[j])
	   ij:=IJ.Idx(&vZn)
	   I = append(I,ij+1)
	   IJ1:=vZn[i].Mul(vZn[j])
	   ij1:=IJ1.Idx(&vZn)
	   I1 = append(I1,ij1+1)	   
	  }
	  vvAdd = append(vvAdd,I)
	  vvMul = append(vvMul,I1)	  
	 }
	 return vvAdd,vvMul
}

func PrintTable(vv [][]int){
	for _, v := range vv {
			for _, v2 := range v {
				fmt.Printf("%d ",v2)
			}
			fmt.Println()
		}
	return
}

func WriteTable(vv,vv1 [][]int,fn string) {
	f, err := os.OpenFile(fmt.Sprintf("%s.txt",fn), os.O_RDWR|os.O_CREATE, os.ModePerm)
	if err != nil {
		panic(err)
	}
	defer f.Close()
	
	n:=len(vv)
	var buf string
	buf = fmt.Sprintf("[R%dAdd]\n",n)
	f.WriteString(buf)	
	for i:=0;i<n;i++{
		for j:=0;j<n;j++{
			buf = fmt.Sprintf("%d ",vv[i][j])
			f.WriteString(buf)
		}
		f.WriteString("\n");
	}
	buf = fmt.Sprintf("[R%dMul]\n",n)
	f.WriteString(buf)	
	for i:=0;i<n;i++{
		for j:=0;j<n;j++{
			buf = fmt.Sprintf("%d ",vv1[i][j])
			f.WriteString(buf)
		}
		f.WriteString("\n");
	}	
}

func Arr1_2(a *[]int,m,n int)[][]int{
res := [][]int{}
for i:=0;i<m;i++ {
            t := []int{}
            for j:=0;j<n;j++ {
                r := (*a)[i*n+j]
                t = append(t, r)
            }
            res = append(res,t)
        }
return res
}

// n中取m的排列数
func mathPailie(n int, m int) int {
    return jieCheng(n) / jieCheng(n-m)
}
 
// n中取m的组合数
func mathZuhe(n int, m int) int {
    return jieCheng(n) / (jieCheng(n-m) * jieCheng(m))
}
 
// 阶乘
func jieCheng(n int) int {
    result := 1
    for i := 2; i <= n; i++ {
        result *= i
    }
 
    return result
}

// 根据索引号数组得到元素数组
func findNumsByIndexs(nums []int, indexs [][]int) [][]int {
    if len(indexs) == 0 {
        return [][]int{}
    }
 
    result := make([][]int, len(indexs))
 
    for i, v := range indexs {
        line := make([]int, 0)
        for j, v2 := range v {
            if v2 == 1 {
                line = append(line, nums[j])
            }
        }
        result[i] = line
    }
 
    return result
}

func moveOneToLeft(leftNums []int) {
    //计算有几个1
    sum := 0
    for i := 0; i < len(leftNums); i++ {
        if leftNums[i] == 1 {
            sum++
        }
    }
 
    //将前sum个改为1，之后的改为0
    for i := 0; i < len(leftNums); i++ {
        if i < sum {
            leftNums[i] = 1
        } else {
            leftNums[i] = 0
        }
    }
}

// 将ele复制后添加到arr中，返回新的数组
func addTo(arr [][]int, ele []int) [][]int {
    newEle := make([]int, len(ele))
    copy(newEle, ele)
    arr = append(arr, newEle)
 
    return arr
}

// n中取m
func zuheResult(n int, m int) [][]int {
    if m < 1 || m > n {
        fmt.Println("Illegal argument. Param m must between 1 and len(nums).")
        return [][]int{}
    }
 
    //保存最终结果的数组，总数直接通过数学公式计算
    result := make([][]int, 0, mathZuhe(n, m))
    //保存每一个组合的索引的数组，1表示选中，0表示未选中
    indexs := make([]int, n)
    for i := 0; i < n; i++ {
        if i < m {
            indexs[i] = 1
        } else {
            indexs[i] = 0
        }
    }
 
    //第一个结果
    result = addTo(result, indexs)
    for {
        find := false
        //每次循环将第一次出现的 1 0 改为 0 1，同时将左侧的1移动到最左侧
        for i := 0; i < n-1; i++ {
            if indexs[i] == 1 && indexs[i+1] == 0 {
                find = true
 
                indexs[i], indexs[i+1] = 0, 1
                if i > 1 {
                    moveOneToLeft(indexs[:i])
                }
                result = addTo(result, indexs)
 
                break
            }
        }
 
        //本次循环没有找到 1 0 ，说明已经取到了最后一种情况
        if !find {
            break
        }
    }
 
    return result
}

func IsEqual(a *[]int,b *[]int)bool {
    n:=len((*a))
	if(len((*b))!=n){
		return false
	}
	for i:=0;i<n;i++{
		if((*a)[i]!=(*b)[i]){
			return false
		}
	}
	return true
}

func IsInS(S *[][]int,v *[]int)int {
    n:=len((*S))
	for i:=0;i<n;i++{
		bRet := IsEqual(&(*S)[i],v)
			if(bRet){
			   return i
			}
	}
	return -1
}

func VOrder(G *[][]int,m int)[]int {
	ret := []int{}
	var mi int=m
	ret=append(ret,1)
    for {
        if mi==1 {
            break
        }
        ret=append(ret,mi)
        mi=(*G)[mi-1][m-1]
    }
	return ret
}

func Inv(G *[][]int,m int)int {
	v:=VOrder(G,m)
	var ord int=len(v)
	//fmt.Println("v=",v,"m=",m,",ord=",ord,"=>",v[ord-1])
	return v[ord-1]
}

func IsInCenterOfG(G *[][]int,a int) bool{
	for i:=0;i<len(*G);i++{
        ia:=(*G)[i][a-1]
        ai:=(*G)[a-1][i]
		if(ia!=ai){
			return false
		}
	}
	return true
}

func CenterOfG(G *[][]int)[]int {
	ret := []int{}
	for i:=0;i<len(*G);i++{
		if(IsInCenterOfG(G,i+1)){
			ret=append(ret,i+1)
		}
	}
	return ret
}

func IsNormalSubgroup(G *[][]int,S *[]int,A *[]int) bool{
 //A是S的子集
 for i:=0;i<len(*A);i++{
  if(IsInFR(S,(*A)[i])==-1){
   return false
  }
 }
 //进一步判断是否是正规子群
 for i:=0;i<len(*S);i++{
  for j:=0;j<len(*A);j++{
   gh:=(*G)[(*S)[i]-1][(*A)[j]-1]
   g1:=Inv(G,(*S)[i])
   ghg1:=(*G)[gh-1][g1-1]
   //fmt.Println("G=",(*G),"S,=",S,",A=",A,"i=",i,",j=",j,",g=",(*S)[i],",h=",(*A)[j],",g1=",g1,",gh=",gh,",ghg1=",ghg1)
   if(IsInFR(A,ghg1)==-1){
    return false
   }
  }
 }
 return true
}

// 判断子环A是否是环S的理想
func IsIdeal(G *[][]int,M *[][]int,S *[]int,A *[]int) bool{
 //A是S的子集
 for i:=0;i<len(*A);i++{
  if(IsInFR(S,(*A)[i])==-1){
   return false
  }
 }
 //进一步判断是否是理想
 for i:=0;i<len(*S);i++{//任意纯量环元素c
  for j:=0;j<len(*A);j++{//任意向量模元素a
   ca:=(*M)[(*S)[i]-1][(*A)[j]-1]
   ac:=(*M)[(*A)[j]-1][(*S)[i]-1]
   if(IsInFR(A,ca)==-1||IsInFR(A,ac)==-1){
    return false
   }
  }
 }
 return true
}

func quotientGN(G *[][]int,S *[]int,A *[]int)[][]int {
	ret := [][]int{}
	s:=len(*S)
	n:=len(*A)
    for i:=0;i<s;i++{
		I := []int{}
		for j:=0;j<n;j++{
			ij:=(*G)[(*S)[i]-1][(*A)[j]-1]
			I=append(I,ij)
		}
		BubbleSort(&I)
		if(IsInS(&ret,&I)==-1){
			ret=append(ret,I)
		}
	}
	return ret
}

func IsInS2(S *[][]int,m int)int {
    n:=len((*S))
	for i:=0;i<n;i++{
		bRet := IsInFR(&(*S)[i],m)
			if(bRet>-1){
			   return i
			}
	}
	return -1
}

func quotientTable(G *[][]int,H *[][]int,S *[]int,A *[]int)[][]int {
	ret := [][]int{}
	n:=len(*H)
    for i:=0;i<n;i++{
	    I := []int{}
		for j:=0;j<n;j++{
			ij:=(*G)[(*H)[i][0]-1][(*H)[j][0]-1]
			IJ:=IsInS2(H,ij)
			I=append(I,IJ+1)
		}
		ret=append(ret,I)
	}
	return ret
}

// 环R(A,M)的所有子环S(R)
func AllSubrings(A *[][]int,M *[][]int) {
	ZM:=CenterOfG(M)	
	S := [][]int{}
	n:=len(*A)
	nums := []int{}
	for i:=1;i<=n;i++{
		nums=append(nums,i)
	}	
	timeStart := time.Now()
	for m:=1;m<=n;m++{
		indexs := zuheResult(n, m)
		result := findNumsByIndexs(nums, indexs)
		for _, v := range result {
			vFR:=FR(A,M,&v)
			if(IsInS(&S,&vFR)==-1){
			    S=append(S,vFR) 
				bZ:=IsEqual(&ZM,&vFR)
                var str string
                if(bZ){
				   str=",是中心"
                }				
				bN:=IsNormalSubgroup(A,&nums,&vFR)
				bI:=IsIdeal(A,M,&nums,&vFR)	
                if(!bN){
				   fmt.Println("出错了，加法群的子群一定是正规子群")
				}				
				if(bI){
				//fmt.Println(v,"=>",vFR,"是理想")
                H:=quotientGN(A,&nums,&vFR) 
                vvHA:=quotientTable(A,&H,&nums,&vFR)
                vvHM:=quotientTable(M,&H,&nums,&vFR)				
				fmt.Println(v,"=>",vFR,"是理想",str,",商环:",H)
	            fmt.Println(fmt.Sprintf("[R%dAdd]",len(H)))				
                PrintTable(vvHA)
			    fmt.Println(fmt.Sprintf("[R%dMul]",len(H)))				
                PrintTable(vvHM)		
				}else{
				fmt.Println(v,"=>",vFR,"不是理想",str)
				}				
				//fmt.Println(v,"=>",vFR)
			//}else{
			//   fmt.Println(v,"->",vFR)
			}
		}
	}
    timeEnd := time.Now()
    fmt.Println("time consume:", timeEnd.Sub(timeStart))
}

func SubGroupTable(G *[][]int,S *[]int)[][]int{
 ret:=[][]int{}
 m:=len(*S)
 for i:=0;i<m;i++{
  I:=[]int{}
  for j:=0;j<m;j++{
   IJ:=(*G)[(*S)[i]-1][(*S)[j]-1]
   ij:=IsInFR(S,IJ)
   I = append(I,ij+1)
  }
  ret = append(ret,I)
 }
 return ret
} 

func AllSubrings1(A *[][]int,M *[][]int,N int) {
	ZM:=CenterOfG(M)	
	S := [][]int{}
	n:=len(*A)
	nums := []int{}
	for i:=1;i<=n;i++{
		nums=append(nums,i)
	}	
	timeStart := time.Now()
	for m:=1;m<=n;m++{
		indexs := zuheResult(n, m)
		result := findNumsByIndexs(nums, indexs)
		for _, v := range result {
			vFR:=FR(A,M,&v)
			if(IsInS(&S,&vFR)==-1){
			    S=append(S,vFR) 
				bZ:=IsEqual(&ZM,&vFR)
                var str string
                if(bZ){
				   str=",是中心"
                }				
				bN:=IsNormalSubgroup(A,&nums,&vFR)
				bI:=IsIdeal(A,M,&nums,&vFR)	
                if(!bN){
				   fmt.Println("出错了，加法群的子群一定是正规子群")
				}				
				if(bI){
				//fmt.Println(v,"=>",vFR,"是理想")
                H:=quotientGN(A,&nums,&vFR) 	
                vvHA:=quotientTable(A,&H,&nums,&vFR)
                vvHM:=quotientTable(M,&H,&nums,&vFR)				
				fmt.Println(v,"=>",vFR,"是理想",str,",商环:",H)
	            fmt.Println(fmt.Sprintf("[R%dAdd]",len(H)))				
                PrintTable(vvHA)
			    fmt.Println(fmt.Sprintf("[R%dMul]",len(H)))				
                PrintTable(vvHM)		
				}else{
				fmt.Println(v,"=>",vFR,"不是理想",str)
				}				
				//fmt.Println(v,"=>",vFR)
			//}else{
			//   fmt.Println(v,"->",vFR)
				if(len(vFR)==N){
					fmt.Println(len(vFR),"阶子环:")
					vvFRA:=SubGroupTable(A,&vFR)	
					fmt.Println(fmt.Sprintf("[R%dAdd]",len(vFR)))				
					PrintTable(vvFRA)
					vvFRM:=SubGroupTable(M,&vFR)	
					fmt.Println(fmt.Sprintf("[R%dMul]",len(vFR)))				
					PrintTable(vvFRM)	
				}			
			}
		}
	}
    timeEnd := time.Now()
    fmt.Println("time consume:", timeEnd.Sub(timeStart))
}

func test1(){
	I:=g_Z4[0]//零元
	a:=g_Z4[1]//乘法幺元
	aa:=g_Z4[2]
	aaa:=g_Z4[3]
	fmt.Println("I=",I.getName())
	fmt.Println("a=",a.getName())
	fmt.Println("aa=",aa)
	fmt.Println("aaa=",aaa)	
	fmt.Println("I-I=",I.InvAdd())		
	fmt.Println("I-a=",a.InvAdd())	
	fmt.Println("I-aa=",aa.InvAdd())		
	fmt.Println("I-aaa=",aaa.InvAdd())
	fmt.Println("aa*aaa=",aa.Mul(aaa))
	fmt.Println("aaa*aa=",aaa.Mul(aa))
}

func test2() {
{
vv1,vv2:=ZnTable(16)
fmt.Println("ShowAdditionTable(Z/16Z)=",vv1)
PrintTable(vv1)
fmt.Println("ShowMultiplicationTable(Z/16Z)=",vv2)
PrintTable(vv2)
WriteTable(vv1,vv2,"Z16")
}
{
vv1,vv2:=ZnmTable(8,2)
fmt.Println("ShowAdditionTable(R4_2)=",vv1)
PrintTable(vv1)
fmt.Println("ShowMultiplicationTable(R4_2)=",vv2)
PrintTable(vv2)
WriteTable(vv1,vv2,"R4_2")
}
}

func test3() {

var v1 []int=[]int{2,3}
var v2 []int=[]int{2}
var v3 []int=[]int{3}
var v4 []int=[]int{4}
{
fmt.Println("S(R4_3):")
var v1FR []int=FR(&g_Z4Add,&g_Z4Mul,&v1)
var v2FR []int=FR(&g_Z4Add,&g_Z4Mul,&v2)
var v3FR []int=FR(&g_Z4Add,&g_Z4Mul,&v3)
var v4FR []int=FR(&g_Z4Add,&g_Z4Mul,&v4)
fmt.Println("v1=",v1)
fmt.Println("v1FR=",v1FR)
fmt.Println("v2=",v2)
fmt.Println("v2FR=",v2FR)
fmt.Println("v3=",v3)
fmt.Println("v3FR=",v3FR)
fmt.Println("v4=",v4)
fmt.Println("v4FR=",v4FR)
}
{
fmt.Println("S(R4_2):")
var v1FR []int=FR(&g_Z4Add,&g_R4_2Mul,&v1)
var v2FR []int=FR(&g_Z4Add,&g_R4_2Mul,&v2)
var v3FR []int=FR(&g_Z4Add,&g_R4_2Mul,&v3)
var v4FR []int=FR(&g_Z4Add,&g_R4_2Mul,&v4)
fmt.Println("v1=",v1)
fmt.Println("v1FR=",v1FR)
fmt.Println("v2=",v2)
fmt.Println("v2FR=",v2FR)
fmt.Println("v3=",v3)
fmt.Println("v3FR=",v3FR)
fmt.Println("v4=",v4)
fmt.Println("v4FR=",v4FR)
}
}

func test4() {
    {
        vv1,vv2:=ZnTable(16)
        vv21,vv22:=ZnmTable(16,4)	
		vv31,vv32:=ZnTable(4)
		A:=[]*[][]int{&vv1,&vv21,&vv31}
		M:=[]*[][]int{&vv2,&vv22,&vv32}
		strR:=[]string{"Z/16Z","4Z/16Z","Z/4Z"} 
		for k:=0;k<len(M);k++{
			fmt.Printf("S(%s):\n",strR[k])
			AllSubrings(A[k],M[k])	
		}
		return
	}

    if(true){
	A:=[]*[][]int{&g_Z4Add,&g_Z4Add,&g_Z4Add,&g_F4Add,&g_F4Add,&g_F4Add,&g_F4Add,&g_F4Add,&g_F4Add,&g_F4Add,&g_F4Add}
	M:=[]*[][]int{&g_R4_1Mul,&g_R4_2Mul,&g_Z4Mul,&g_M4Mul,&g_R4_5Mul,&g_R4_6Mul,&g_R4_7Mul,&g_R4_8Mul,&g_R4_9Mul,&g_F2F2Mul,&g_F4Mul}	
	delt:=[]int{0,0,0,1,1,1,1,1,1,1,1}
	for i, v := range g_F4Add {
			for j, _ := range v {
				g_F4Add[i][j]+=1
			}
		}	
	for k:=0;k<len(M);k++{
		for i, v := range *M[k] {
				for j, _ := range v {
					(*M[k])[i][j]+=delt[k]			
				}
			}
		fmt.Printf("S(R4_%d):\n",k+1)
		AllSubrings(A[k],M[k])	
	}
	}
   {
	A:=[]*[][]int{&g_R16_101Add,&g_R16_102Add,&g_R16_103Add,&g_R16_104Add,&g_R16_300Add,&g_R16_382Add,&g_R16_385Add}
	M:=[]*[][]int{&g_R16_101Mul,&g_R16_102Mul,&g_R16_103Mul,&g_R16_104Mul,&g_R16_300Mul,&g_R16_382Mul,&g_R16_385Mul}	
	str:=[]string{"R16_101","R16_102","R16_103","R16_104","R16_300","R16_382","R16_385"}
	for k:=0;k<len(M);k++{
		fmt.Printf("S(%s):\n",str[k])
		AllSubrings1(A[k],M[k],8)	
	}
	}
	return
}

func main() {
   {
	A:=[]*[][]int{&g_R16_105Add,&g_R16_106Add}
	M:=[]*[][]int{&g_R16_105Mul,&g_R16_106Mul}	
	str:=[]string{"R16_105","R16_106"}
	for k:=0;k<len(M);k++{
		fmt.Printf("S(%s):\n",str[k])
		AllSubrings1(A[k],M[k],8)	
	}
	}
	return
	
   {
	A:=[]*[][]int{&g_R8_6Add,&g_R8_6Add,&g_R8_6Add,&g_F8Add,&g_F8Add,&g_F8Add,&g_F8Add,&g_R8_45Add,&g_R8_45Add,&g_R8_24Add,&g_R8_24Add,&g_R8_24Add,&g_R8_24Add,&g_R8_19Add,&g_R8_810Add,&g_R8_16Add2}
	M:=[]*[][]int{&g_R8_6Mul,&g_R8_16Mul,&g_R8_23Mul,&g_R8_46Mul,&g_R8_48Mul,&g_R8_51Mul,&g_F8Mul,&g_R8_33Mul,&g_R8_45Mul,&g_R8_8Mul,&g_R8_9Mul,&g_R8_10Mul,&g_R8_12Mul,&g_R8_19Mul,&g_R8_810Mul,&g_R8_16Mul2}	
	str:=[]string{"R8_6","R8_16","R8_23","R8_46","R8_48","R8_51","F8","R8_33","R8_45","R8_8","R8_9","R8_10","R8_12","R8_19","R8_810","R8_16"}
	for k:=0;k<len(M);k++{
		fmt.Printf("S(%s):\n",str[k])
		AllSubrings1(A[k],M[k],4)	
	}
	}
}