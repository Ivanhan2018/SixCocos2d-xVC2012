#ifndef PACKET_HEAD_FILE
#define PACKET_HEAD_FILE

#pragma pack(1)

//////////////////////////////////////////////////////////////////////////////////
//端口定义
typedef unsigned char _BYTE_;
typedef unsigned short _WORD_;
typedef unsigned int _D_WORD_;
typedef unsigned int _DWORD_;
typedef long long _LRESULT_;
typedef  unsigned short  _TCHAR_;
typedef const char* _LPCTSTR_;
typedef char* _LPTSTR_;
#ifndef WIN32
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef unsigned int DWORD;
typedef  unsigned short  TCHAR;
typedef int LONG;
#endif
typedef unsigned int  _UINT_;
//typedef _D_WORD_ COLORREF;
//typedef _D_WORD_ *LPCOLORREF;

typedef unsigned int UINT;
typedef unsigned char * LPBYTE;
#ifndef WIN32
typedef const char *LPCSTR;
typedef _TCHAR_ *LPWSTR;
typedef const _TCHAR_ *LPCWSTR;
#endif
typedef const void *LPCVOID;

#define far
typedef const void far     *_LPCVOID_;
typedef _BYTE_ far            *_LPBYTE_;
#define DTP_NULL					0								//无效数据
#define CountArray(Array) (sizeof(Array)/sizeof(Array[0]))

#define _UINT_ unsigned int
#define MAX_CONTENT					512									//并发容量
#define PORT_AUTO_SELECT			INVALID__WORD_						//自动端口

#define PORT_LOGON					669								    //登陆端口
#define PORT_CENTER					666								    //协调端口
#define PORT_MANAGER				668								    //管理端口

//////////////////////////////////////////////////////////////////////////////////
//网络定义

//数据类型
#define DK_MAPPED					0x01								//映射类型
#define DK_ENCRYPT					0x02								//加密类型
#define DK_COMPRESS					0x04								//压缩类型

//长度定义
#define SOCKET_TCP_BUFFER			16384								//网络缓冲
#define SOCKET_TCP_PACKET			(SOCKET_TCP_BUFFER-sizeof(TCP_Head))//网络缓冲

//长度定义
#define SOCKET_UDP_BUFFER			16384								//网络缓冲
#define SOCKET_UDP_PACKET			(SOCKET_UDP_BUFFER-sizeof(UDP_Head))//网络缓冲


#define SOCKET_STATUS_IDLE			0									//空闲状态
#define SOCKET_STATUS_WAIT			1									//等待状态
#define SOCKET_STATUS_CONNECT		2									//连接状态

//////////////////////////////////////////////////////////////////////////////////
//结构定义


//关闭原因
#define SHUT_REASON_INSIDE			0									//内部原因
#define SHUT_REASON_NORMAL			1									//正常关闭
#define SHUT_REASON_REMOTE			2									//远程关闭
#define SHUT_REASON_TIME_OUT		3									//网络超时
#define SHUT_REASON_EXCEPTION		4									//异常关闭

//////////////////////////////////////////////////////////////////////////
//公共定义

//代理类型
#define PROXY_NONE					0									//没有代理
#define PROXY_HTTP					1									//代理类型
#define PROXY_SOCKS4				2									//代理类型
#define PROXY_SOCKS5				3									//代理类型
//////////////////////////////////////////////////////////////////////////////////
//结构定义


//代理描述
struct tagProxyDescribe
{
	_BYTE_							cbProxyType;						//代理类型
	_TCHAR_							szDescribe[32];						//描述字符
};

//代理信息
struct tagProxyServer
{
	_WORD_							wProxyPort;							//代理端口
	_TCHAR_							szUserName[32];						//代理用户
	_TCHAR_							szPass_WORD_[32];					//代理密码
	_TCHAR_							szProxyServer[32];					//代理地址
};

////////////////////////////////////////////////////////////////////////////
////枚举定义
//
//接收变量

struct _MY_SYSTEMTIME{
    _WORD_ wYear ; //年
    _WORD_ wMonth ;//月
    _WORD_ wDayOfWeek ;//星期，0=星期日，1=星期一...
    _WORD_ wDay ;//日
    _WORD_ wHour ;//时
    _WORD_ wMinute ;//分
    _WORD_ wSecond ;//秒
    _WORD_ wMilliseconds ;//毫秒
};
//I D 登录
//背包信息
struct tagUserPropertyInfoAttrib
{
	_WORD_							ID;									//道具ID
	_WORD_							PropertyID;							//道具标识
	_WORD_							PropertyCount;						//道具数目
	_TCHAR_							szPropertyName[32];					//道具名字
	_TCHAR_							szPropertyInfo[128];				//描述信息
};
//网络内核
struct TCP_Info
{
	_BYTE_							cbDataKind;							//数据类型
	_BYTE_							cbCheckCode;						//效验字段
	_WORD_							wPacketSize;						//数据大小
};

//网络命令
struct TCP_Command
{
	_WORD_							wMainCmdID;							//主命令码
	_WORD_							wSubCmdID;							//子命令码
};

//网络包头
struct TCP_Head
{
	TCP_Info						TCPInfo;							//基础结构
	TCP_Command						CommandInfo;						//命令信息
};

//网络缓冲
struct TCP_Buffer
{
	TCP_Head						Head;								//数据包头
	_BYTE_							cbBuffer[SOCKET_TCP_PACKET];		//数据缓冲
};

//////////////////////////////////////////////////////////////////////////////////

//网络内核
struct UDP_Info
{
	_BYTE_							cbDataKind;							//数据类型
	_BYTE_							cbCheckCode;						//效验字段
	_WORD_							wPacketSize;						//数据大小
	_WORD_							wPacketIndex;						//数据序列
	_WORD_							wConnectIndex;						//连接索引
};


//网络命令
struct UDP_Command
{
	_WORD_							wMainCmdID;							//主命令码
	_WORD_							wSubCmdID;							//子命令码
};


//网络包头
struct UDP_Head
{
	UDP_Info						UDPInfo;							//基础结构
	UDP_Command						CommandInfo;						//命令信息
};

//网络缓冲
struct UDP_Buffer
{
	UDP_Head						Head;								//数据包头
	_BYTE_							cbBuffer[SOCKET_UDP_PACKET];		//数据缓冲
};


//网络接口
class ITCPSocketSink
{
	//网络事件
public:
	//连接事件
	virtual bool OnEventTCPSocketLink(_WORD_ wSocketID, int nErrorCode)=0;
	//关闭事件
	virtual bool  OnEventTCPSocketShut(_WORD_ wSocketID, _BYTE_ cbShutReason)=0;
	//读取事件
	virtual bool  OnEventTCPSocketRead(_WORD_ wSocketID, TCP_Command Command, void * pData, _WORD_ wDataSize)=0;
};

//////////////////////////////////////////////////////////////////////////////////

//内核命令
#define MDM_KN_COMMAND				0									//内核命令
#define SUB_KN_DETECT_SOCKET		1									//检测命令

//////////////////////////////////////////////////////////////////////////////////
//传输数据

#define IPC_VER						1									//版本标识
#define IPC_PACKET					(10240-sizeof(IPC_Head))			//最大包长
#define IPC_BUFFER					(sizeof(IPC_Head)+IPC_PACKET)		//缓冲长度

//数据包头
struct IPC_Head
{
	_WORD_							wVersion;							//版本标识
	_WORD_							wPacketSize;						//数据大小
	_WORD_							wMainCmdID;							//主命令码
	_WORD_							wSubCmdID;							//子命令码
};

//IPC 包结构
struct IPC_Buffer
{
	IPC_Head						Head;								//数据包头
	_BYTE_							cbBuffer[IPC_PACKET];				//数据缓冲
};

//////////////////////////////////////////////////////////////////////////////////
//数据定义

//加密密钥
const _D_WORD_ g_dwPacketKey=0xA55AA55A;

//发送映射
const _BYTE_ g_Send_BYTE_Map[256]=
{
	0x70,0x2F,0x40,0x5F,0x44,0x8E,0x6E,0x45,0x7E,0xAB,0x2C,0x1F,0xB4,0xAC,0x9D,0x91,
	0x0D,0x36,0x9B,0x0B,0xD4,0xC4,0x39,0x74,0xBF,0x23,0x16,0x14,0x06,0xEB,0x04,0x3E,
	0x12,0x5C,0x8B,0xBC,0x61,0x63,0xF6,0xA5,0xE1,0x65,0xD8,0xF5,0x5A,0x07,0xF0,0x13,
	0xF2,0x20,0x6B,0x4A,0x24,0x59,0x89,0x64,0xD7,0x42,0x6A,0x5E,0x3D,0x0A,0x77,0xE0,
	0x80,0x27,0xB8,0xC5,0x8C,0x0E,0xFA,0x8A,0xD5,0x29,0x56,0x57,0x6C,0x53,0x67,0x41,
	0xE8,0x00,0x1A,0xCE,0x86,0x83,0xB0,0x22,0x28,0x4D,0x3F,0x26,0x46,0x4F,0x6F,0x2B,
	0x72,0x3A,0xF1,0x8D,0x97,0x95,0x49,0x84,0xE5,0xE3,0x79,0x8F,0x51,0x10,0xA8,0x82,
	0xC6,0xDD,0xFF,0xFC,0xE4,0xCF,0xB3,0x09,0x5D,0xEA,0x9C,0x34,0xF9,0x17,0x9F,0xDA,
	0x87,0xF8,0x15,0x05,0x3C,0xD3,0xA4,0x85,0x2E,0xFB,0xEE,0x47,0x3B,0xEF,0x37,0x7F,
	0x93,0xAF,0x69,0x0C,0x71,0x31,0xDE,0x21,0x75,0xA0,0xAA,0xBA,0x7C,0x38,0x02,0xB7,
	0x81,0x01,0xFD,0xE7,0x1D,0xCC,0xCD,0xBD,0x1B,0x7A,0x2A,0xAD,0x66,0xBE,0x55,0x33,
	0x03,0xDB,0x88,0xB2,0x1E,0x4E,0xB9,0xE6,0xC2,0xF7,0xCB,0x7D,0xC9,0x62,0xC3,0xA6,
	0xDC,0xA7,0x50,0xB5,0x4B,0x94,0xC0,0x92,0x4C,0x11,0x5B,0x78,0xD9,0xB1,0xED,0x19,
	0xE9,0xA1,0x1C,0xB6,0x32,0x99,0xA3,0x76,0x9E,0x7B,0x6D,0x9A,0x30,0xD6,0xA9,0x25,
	0xC7,0xAE,0x96,0x35,0xD0,0xBB,0xD2,0xC8,0xA2,0x08,0xF3,0xD1,0x73,0xF4,0x48,0x2D,
	0x90,0xCA,0xE2,0x58,0xC1,0x18,0x52,0xFE,0xDF,0x68,0x98,0x54,0xEC,0x60,0x43,0x0F
};

//接收映射
const _BYTE_ g_Recv_BYTE_Map[256]=
{
	0x51,0xA1,0x9E,0xB0,0x1E,0x83,0x1C,0x2D,0xE9,0x77,0x3D,0x13,0x93,0x10,0x45,0xFF,
	0x6D,0xC9,0x20,0x2F,0x1B,0x82,0x1A,0x7D,0xF5,0xCF,0x52,0xA8,0xD2,0xA4,0xB4,0x0B,
	0x31,0x97,0x57,0x19,0x34,0xDF,0x5B,0x41,0x58,0x49,0xAA,0x5F,0x0A,0xEF,0x88,0x01,
	0xDC,0x95,0xD4,0xAF,0x7B,0xE3,0x11,0x8E,0x9D,0x16,0x61,0x8C,0x84,0x3C,0x1F,0x5A,
	0x02,0x4F,0x39,0xFE,0x04,0x07,0x5C,0x8B,0xEE,0x66,0x33,0xC4,0xC8,0x59,0xB5,0x5D,
	0xC2,0x6C,0xF6,0x4D,0xFB,0xAE,0x4A,0x4B,0xF3,0x35,0x2C,0xCA,0x21,0x78,0x3B,0x03,
	0xFD,0x24,0xBD,0x25,0x37,0x29,0xAC,0x4E,0xF9,0x92,0x3A,0x32,0x4C,0xDA,0x06,0x5E,
	0x00,0x94,0x60,0xEC,0x17,0x98,0xD7,0x3E,0xCB,0x6A,0xA9,0xD9,0x9C,0xBB,0x08,0x8F,
	0x40,0xA0,0x6F,0x55,0x67,0x87,0x54,0x80,0xB2,0x36,0x47,0x22,0x44,0x63,0x05,0x6B,
	0xF0,0x0F,0xC7,0x90,0xC5,0x65,0xE2,0x64,0xFA,0xD5,0xDB,0x12,0x7A,0x0E,0xD8,0x7E,
	0x99,0xD1,0xE8,0xD6,0x86,0x27,0xBF,0xC1,0x6E,0xDE,0x9A,0x09,0x0D,0xAB,0xE1,0x91,
	0x56,0xCD,0xB3,0x76,0x0C,0xC3,0xD3,0x9F,0x42,0xB6,0x9B,0xE5,0x23,0xA7,0xAD,0x18,
	0xC6,0xF4,0xB8,0xBE,0x15,0x43,0x70,0xE0,0xE7,0xBC,0xF1,0xBA,0xA5,0xA6,0x53,0x75,
	0xE4,0xEB,0xE6,0x85,0x14,0x48,0xDD,0x38,0x2A,0xCC,0x7F,0xB1,0xC0,0x71,0x96,0xF8,
	0x3F,0x28,0xF2,0x69,0x74,0x68,0xB7,0xA3,0x50,0xD0,0x79,0x1D,0xFC,0xCE,0x8A,0x8D,
	0x2E,0x62,0x30,0xEA,0xED,0x2B,0x26,0xB9,0x81,0x7C,0x46,0x89,0x73,0xA2,0xF7,0x72
};

//////////////////////////////////////////////////////////////////////////////////

struct tagCustomRule
{
	//其他定义
	_BYTE_							cbFleeScorePatch;					//逃跑补偿
    
	//时间定义
	_BYTE_							cbTimeOutCard;						//出牌时间
	_BYTE_							cbTimeCallBanker;					//叫地主时间
	_BYTE_							cbTimeRodBanker;					//抢地主时间
	_BYTE_							cbTimeAddDouble;					//加倍时间
	_BYTE_							cbTimeStartGame;					//开始时间
	_BYTE_							cbTimeHeadOutCard;					//首出时间
};

#pragma pack()

#endif